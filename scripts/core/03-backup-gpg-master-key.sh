#!/usr/bin/env bash
# scripts/core/03-backup-gpg-master-key.sh
# Exports the GPG master key and provides instructions for secure offline backup.
# This script is crucial for ensuring you can recover your GPG identity.

SHELL_OPTIONS="set -e -u -o pipefail"
# set -e: Exit immediately if a command exits with a non-zero status.
# set -u: Treat unset variables as an error when substituting.
# set -o pipefail: The return value of a pipeline is the status of the last command to exit with a non-zero status, or zero if no command exited with a non-zero status.
eval "$SHELL_OPTIONS"

BASE_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
LIB_SCRIPT_PATH="${BASE_DIR}/scripts/lib/common.sh"

if [ ! -f "$LIB_SCRIPT_PATH" ]; then
    echo "Error: common.sh not found at $LIB_SCRIPT_PATH"
    exit 1
fi
# shellcheck source=scripts/lib/common.sh
# Load common library functions (logging, prompts, etc.)
source "$LIB_SCRIPT_PATH"

# --- Usage Function ---
usage() {
    echo "Usage: $(basename "$0")"
    echo ""
    echo "This script guides you through exporting your GPG master private key, public key,"
    echo "and reminds you about the revocation certificate for secure offline backup."
    echo "It operates on the GPG keys generated by '01-generate-gpg-master-key.sh'"
    echo "and expects them to be in the temporary GPG home: '${TEMP_GNUPGHOME_DIR_NAME:-.gnupghome_temp_ykm}'."
    echo ""
    echo "The script will:"
    echo "  1. Read the GPG Master Key ID from '${GPG_MASTER_KEY_ID_FILE:-.gpg_master_key_id}'."
    echo "  2. Create a backup directory named '${BACKUP_DIR_NAME:-gpg_master_key_backup}' in the project root."
    echo "  3. Prompt for the GPG master key passphrase to authorize export of the private key."
    echo "  4. Export the master private key (encrypted with its passphrase) and the public key."
    echo "  5. Copy the previously generated revocation certificate into the backup directory."
    echo "  6. Provide CRITICAL instructions for securely storing these backup files offline."
    echo ""
    echo "Prerequisites:"
    echo "  - GPG master key must have been generated by '01-generate-gpg-master-key.sh'."
    echo "  - The temporary GPG home directory must exist and contain the master key."
    echo "  - Required tools: gpg, cp, mkdir, rm."
    exit 1
}
if [[ "${1:-}" == "-h" || "${1:-}" == "--help" ]]; then
    usage
fi

log_info "Starting GPG Master Key Backup Process..."
log_warn "This is a CRITICAL step for the security and recoverability of your GPG identity."

# --- Configuration & Environment Variables ---
# File storing the GPG Master Key ID, typically generated by 01-generate-gpg-master-key.sh
GPG_MASTER_KEY_ID_FILE="${GPG_MASTER_KEY_ID_FILE:-.gpg_master_key_id}"
# Name of the temporary GPG home directory where keys were generated
TEMP_GNUPGHOME_DIR_NAME="${TEMP_GNUPGHOME_DIR_NAME:-.gnupghome_temp_ykm}"
# Full path to the master key ID file
MASTER_KEY_ID_FILE_PATH="${BASE_DIR}/${GPG_MASTER_KEY_ID_FILE}"
# Full path to the temporary GPG home
TEMP_GNUPGHOME_PATH="${BASE_DIR}/${TEMP_GNUPGHOME_DIR_NAME}"

# Directory name for storing the backup files, configurable via environment variable
BACKUP_DIR_NAME_CONFIG="${GPG_BACKUP_DIR_NAME:-gpg_master_key_backup}" # Use configured name
# Full path to the backup directory
BACKUP_DIR="${BASE_DIR}/${BACKUP_DIR_NAME_CONFIG}"


# Variables to store paths of created backup files, used in cleanup on error
MASTER_PRIVATE_KEY_FILE=""
PUBLIC_KEY_FILE=""
COPIED_REVOCATION_CERT_FILE=""
# Variable to temporarily hold the GPG master passphrase
GPG_MASTER_PASSPHRASE=""

# --- Script Specific Cleanup ---
script_specific_cleanup() {
    local exit_status_for_cleanup=${1:-$?}
    log_debug "Running script_specific_cleanup for 03-backup-gpg-master-key.sh with status $exit_status_for_cleanup"
    unset GPG_MASTER_PASSPHRASE
    if [ "$exit_status_for_cleanup" -ne 0 ]; then
        log_warn "Attempting to clean up backup files due to script failure..."
        [ -n "${MASTER_PRIVATE_KEY_FILE:-}" ] && [ -f "${MASTER_PRIVATE_KEY_FILE}" ] && rm -f "${MASTER_PRIVATE_KEY_FILE}"
        [ -n "${PUBLIC_KEY_FILE:-}" ] && [ -f "${PUBLIC_KEY_FILE}" ] && rm -f "${PUBLIC_KEY_FILE}"
        [ -n "${COPIED_REVOCATION_CERT_FILE:-}" ] && [ -f "${COPIED_REVOCATION_CERT_FILE}" ] && rm -f "${COPIED_REVOCATION_CERT_FILE}"
        # If the backup directory was created but is empty after failed attempts, remove it.
        if [ -d "${BACKUP_DIR}" ] && [ -z "$(ls -A "${BACKUP_DIR}")" ]; then
            log_warn "Removing empty backup directory: ${BACKUP_DIR}"
            rmdir "${BACKUP_DIR}" || log_warn "Could not remove backup directory ${BACKUP_DIR}."
        elif [ -d "${BACKUP_DIR}" ]; then
            log_warn "Backup directory ${BACKUP_DIR} may still contain files after cleanup attempt."
        fi
    fi
}

# --- Prerequisite Checks ---
check_command "gpg"; check_command "cp"; check_command "mkdir"; check_command "rm"

# --- Step 1: Verify GPG Master Key ID and Temporary GPG Home ---
log_info "Step 1: Verifying GPG Master Key ID and Temporary GPG Home."
if [ ! -f "${MASTER_KEY_ID_FILE_PATH}" ]; then log_error "Master Key ID file not found: ${MASTER_KEY_ID_FILE_PATH}. Run 01-generate-gpg-master-key.sh first."; exit 1; fi
MASTER_KEY_ID=$(cat "${MASTER_KEY_ID_FILE_PATH}")
if [ -z "${MASTER_KEY_ID}" ]; then log_error "Failed to read Master Key ID from ${MASTER_KEY_ID_FILE_PATH} or file is empty."; exit 1; fi
log_info "Identified GPG Master Key ID for backup: ${MASTER_KEY_ID}"

if [ ! -d "${TEMP_GNUPGHOME_PATH}" ]; then
    # This script relies on the keys being present in the temporary GPG home created by 01-generate-gpg-master-key.sh.
    log_error "Temporary GPG home (${TEMP_GNUPGHOME_PATH}) not found."
    log_error "This script MUST run after '01-generate-gpg-master-key.sh' and before cleaning its temporary GPG home."
    log_error "If you have already moved keys or deleted the temporary GPG home, you must export manually from your main GPG keyring."
    exit 1
fi
log_info "Using temporary GPG home for export: ${TEMP_GNUPGHOME_PATH}"
export GNUPGHOME="${TEMP_GNUPGHOME_PATH}"

# --- Step 2: Create Backup Directory ---
log_info "Step 2: Creating Backup Directory."
if ! mkdir -p "${BACKUP_DIR}"; then log_error "Failed to create backup directory: ${BACKUP_DIR}"; exit 1; fi
# Display the absolute path for clarity, as BACKUP_DIR might be relative.
log_success "Backup files will be saved to: ${BACKUP_DIR} (Absolute path: $(readlink -f "${BACKUP_DIR}" 2>/dev/null || echo "${BACKUP_DIR}"))"

# --- Step 3: Export Master Private Key ---
log_info "Step 3: Exporting Master Private Key."
MASTER_PRIVATE_KEY_FILE="${BACKUP_DIR}/master-private-key-${MASTER_KEY_ID}.asc"
log_info "The master private key will be exported to: ${MASTER_PRIVATE_KEY_FILE}"
log_warn "You will be prompted for the GPG master key passphrase to authorize this export."
ensure_var_set "GPG_MASTER_PASSPHRASE" "Enter passphrase for GPG Master Key ID '${MASTER_KEY_ID}' to export its private part" --secure

# Export the secret key in ASCII armored format.
# --pinentry-mode loopback and --command-fd 0 allow piping the passphrase.
# --batch and --yes are used for non-interactive operation where possible.
GPG_EXPORT_SEC_OUTPUT=$(printf "%s\n" "${GPG_MASTER_PASSPHRASE}" | gpg --no-tty --pinentry-mode loopback --command-fd 0 --armor --batch --yes --export-secret-keys "${MASTER_KEY_ID}" > "${MASTER_PRIVATE_KEY_FILE}" 2>&1)
GPG_EXPORT_SEC_EC=$?
unset GPG_MASTER_PASSPHRASE # Unset passphrase from script memory immediately.

if [ $GPG_EXPORT_SEC_EC -ne 0 ] || [ ! -s "${MASTER_PRIVATE_KEY_FILE}" ]; then
    log_error "Failed to export master private key. GPG Exit Code: $GPG_EXPORT_SEC_EC"
    if [ -n "$GPG_EXPORT_SEC_OUTPUT" ]; then log_error "GPG Output:\n${GPG_EXPORT_SEC_OUTPUT}"; fi
    if [ ! -s "${MASTER_PRIVATE_KEY_FILE}" ]; then log_error "Exported private key file is empty or was not created at ${MASTER_PRIVATE_KEY_FILE}."; fi
    exit 1
fi
log_success "Master private key successfully exported to: ${MASTER_PRIVATE_KEY_FILE}"

# --- Step 4: Export Public Key ---
log_info "Step 4: Exporting Public Key."
PUBLIC_KEY_FILE="${BACKUP_DIR}/public-key-${MASTER_KEY_ID}.asc"
log_info "Exporting public key to: ${PUBLIC_KEY_FILE}"
GPG_EXPORT_PUB_OUTPUT=$(gpg --no-tty --armor --export "${MASTER_KEY_ID}" > "${PUBLIC_KEY_FILE}" 2>&1)
# Exporting the public key does not require a passphrase.
GPG_EXPORT_PUB_EC=$?

if [ $GPG_EXPORT_PUB_EC -ne 0 ] || [ ! -s "${PUBLIC_KEY_FILE}" ]; then
    log_error "Failed to export public key. GPG Exit Code: $GPG_EXPORT_PUB_EC"
    if [ -n "$GPG_EXPORT_PUB_OUTPUT" ]; then log_error "GPG Output:\n${GPG_EXPORT_PUB_OUTPUT}"; fi
    if [ ! -s "${PUBLIC_KEY_FILE}" ]; then log_error "Exported public key file is empty or was not created at ${PUBLIC_KEY_FILE}."; fi
    exit 1
fi
log_success "Public key successfully exported to: ${PUBLIC_KEY_FILE}"

# --- Step 5: Copy Revocation Certificate ---
log_info "Step 5: Locating and Copying Revocation Certificate."
# The revocation certificate should have been generated by 01-generate-gpg-master-key.sh.
REVOCATION_CERT_FILE_EXPECTED="${BASE_DIR}/revocation-certificate-${MASTER_KEY_ID}.asc"
COPIED_REVOCATION_CERT_FILE="${BACKUP_DIR}/revocation-certificate-${MASTER_KEY_ID}.asc"
if [ -f "${REVOCATION_CERT_FILE_EXPECTED}" ]; then
    # If found, copy it to the backup directory.
    log_info "Found revocation certificate generated by script 01 at: ${REVOCATION_CERT_FILE_EXPECTED}"
    if cp "${REVOCATION_CERT_FILE_EXPECTED}" "${COPIED_REVOCATION_CERT_FILE}"; then
        log_success "Copied revocation certificate to backup directory: ${COPIED_REVOCATION_CERT_FILE}"
    else
        log_error "Failed to copy revocation certificate from ${REVOCATION_CERT_FILE_EXPECTED} to ${COPIED_REVOCATION_CERT_FILE}."
        log_warn "Please MANUALLY copy the revocation certificate to your backup location."
    fi
else
    # If not found, this is a critical issue.
    log_error "CRITICAL: Expected revocation certificate NOT FOUND at ${REVOCATION_CERT_FILE_EXPECTED}."
    log_warn "This certificate should have been generated by '01-generate-gpg-master-key.sh'."
    log_warn "If it's missing, your ability to revoke your master key if compromised is at risk."
    log_warn "Attempt to regenerate it from '${TEMP_GNUPGHOME_PATH}' using: gpg --no-tty --output revocation.asc --gen-revoke ${MASTER_KEY_ID}"
fi

log_info "---------------------------------------------------------------------"
# --- Step 6: Display Secure Backup Instructions ---
log_warn "Step 6: CRITICAL - SECURE OFFLINE BACKUP INSTRUCTIONS"
log_info "---------------------------------------------------------------------"
log_info "The following essential files for your GPG identity (ID: ${MASTER_KEY_ID}) are now in the directory:"
log_info "  ${BACKUP_DIR} (Absolute path: $(readlink -f "${BACKUP_DIR}" 2>/dev/null || echo "${BACKUP_DIR}"))"
log_info "    - Master Private Key: $(basename "${MASTER_PRIVATE_KEY_FILE}") (Encrypted with its GPG passphrase)"
log_info "    - Public Key:         $(basename "${PUBLIC_KEY_FILE}")"
log_info "    - Revocation Cert:    $(basename "${COPIED_REVOCATION_CERT_FILE}") (if successfully copied)"
log_warn ""
log_warn "IMMEDIATELY perform the following actions:"
log_warn "  1. Copy the ENTIRE '${BACKUP_DIR_NAME_CONFIG}' directory to a secure OFFLINE storage medium (e.g., a new USB drive)."
log_warn "  2. For maximum security, ENCRYPT THE ENTIRE USB DRIVE (e.g., using LUKS on Linux, VeraCrypt, or similar strong full-disk encryption) with a DIFFERENT, VERY STRONG passphrase."
log_warn "  3. Create MULTIPLE copies of this encrypted offline backup."
log_warn "  4. Store these copies in physically SECURE and GEOGRAPHICALLY SEPARATE locations (e.g., a home safe, a trusted family member's safe, a bank deposit box)."
log_warn "  5. The revocation certificate is your ultimate failsafe. Ensure it's part of these backups. Consider storing one copy of it separately from the primary master key backup if feasible."
log_warn "  6. Document the GPG master key passphrase and the passphrase for your encrypted backup media. Store these passphrases EXTREMELY securely and separately from the backups themselves (e.g., in a reputable password manager, or using other non-digital secure methods)."
log_warn ""
log_info "Refer to Section 3.4 of 'docs/Yubikey-Key-Management-Automation.md' for more detailed guidance on secure offline storage strategies."
log_info "After you have verified your offline backups, you may consider removing the '${BACKUP_DIR_NAME_CONFIG}' directory from this computer, or ensure this computer's disk is fully encrypted."
log_warn "The long-term security of your GPG identity depends ENTIRELY on how securely you manage these backup files and their associated passphrases."
log_info "---------------------------------------------------------------------"

log_success "GPG master key backup export process complete. Follow the critical storage instructions above."
exit 0
