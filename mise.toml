# .mise.toml - Manage development tools, environment, and tasks

# --- Environment Variables ---
# Define project-specific environment variables with default values in .env.tracked.
# Variables defined directly in [[env]] below will take precedence if also defined in these files,
#   unless the file-loaded variable is explicitly set in the shell environment.
[[env]]
_.file = ".env.tracked"            # Default environment variables for the project.
[[env]]
_.file = "secrets/.env.sops.yaml"  # Overrides default variables.
[[env]]                            # Overrides any env vars previously set by env files.
EDITOR = "emacs"
LOG_LEVEL = "debug"
YKM_LOG_FILE = "ykm.log"

# --- Tools ---
# Pin tool versions for reproducible environments (latest as of 2025.05.11)
[tools]
age = "1.2.1"                      # For AGE key management
age-plugin-yubikey = "0.5.0"       # For AGE YubiKey integration
#gpg                               # For GPG operations. Install via OS package manager.
#hopenpgp-tools                    # For GPG key linting (hokey). Install via OS package manager.
shellcheck = "latest"              # For linting Bash scripts
sops = "3.10.2"                    # For SOPS file encryption/decryption
#ykman                             # For YubiKey configuration. Install via OS package manager or Python Pip.

# Ensure that gpg, hopenpgp-tools, pcscd, and ykman are installed and running via your system's package manager.
# e.g., on Debian/Ubuntu: sudo apt install gpg2 hopenpgp-tools pcscd pcsc-tools libccid yubikey-manager

# --- Tasks ---
[tasks.checkup]
description = "Validate project configuration files and essential environment variables."
run = "./scripts/tools/validate-config.sh"
alias = ["validate-config"]

# Core YubiKey & Key Management Tasks
[tasks.generate-gpg-keys]
description = "Generate new GPG master key, subkeys, and revocation certificate."
depends = ["checkup"]
run = "./scripts/core/01-generate-gpg-master-key.sh"

[tasks.generate-software-age-key]
description = "Generate a new software-based AGE keypair and encrypt the private key."
run = "./scripts/core/01-generate-age-keypair.sh"
depends = ["checkup"] # Basic checks still useful

[tasks.provision-primary-gpg-yubikey]
description = "Provision primary YubiKey with GPG subkeys."
run = "./scripts/core/02-provision-gpg-yubikey.sh --serial {{env.PRIMARY_YUBIKEY_SERIAL}}"
depends = ["checkup", "generate-gpg-keys"]

[tasks.backup-gpg-master-key]
description = "Guide secure backup of GPG master key."
run = "./scripts/core/03-backup-gpg-master-key.sh"
depends = ["generate-gpg-keys"]

[tasks.create-backup]
description = "Create an encrypted backup of key materials and configuration."
run = "./scripts/core/06-create-encrypted-backup.sh"
depends = ["generate-gpg-keys"] # Ensure key ID file exists if it's part of backup items

[tasks.provision-primary-age-yubikey]
description = "Provision primary YubiKey with an AGE identity (using YubiKey PIV)."
run = "./scripts/core/04-provision-age-yubikey.sh --serial {{env.PRIMARY_YUBIKEY_SERIAL}} --slot {{env.AGE_PRIMARY_YUBIKEY_PIV_SLOT}} --output {{env.AGE_PRIMARY_YUBIKEY_IDENTITY_FILE}} --pin-policy {{env.AGE_PRIMARY_YUBIKEY_PIN_POLICY}} --touch-policy {{env.AGE_PRIMARY_YUBIKEY_TOUCH_POLICY}}"
depends = ["checkup"]

[tasks.clone-gpg-to-backup-yubikey]
description = "Provision backup YubiKey with the same GPG subkeys as the primary."
run = "./scripts/core/05-clone-gpg-yubikey.sh --serial {{env.BACKUP_YUBIKEY_SERIAL}}"
depends = ["checkup", "generate-gpg-keys"]

[tasks.provision-backup-age-yubikey]
description = "Provision backup YubiKey with a new AGE identity (using YubiKey PIV)."
run = "./scripts/core/04-provision-age-yubikey.sh --serial {{env.BACKUP_YUBIKEY_SERIAL}} --slot {{env.AGE_BACKUP_YUBIKEY_PIV_SLOT}} --output {{env.AGE_BACKUP_YUBIKEY_IDENTITY_FILE}} --pin-policy {{env.AGE_BACKUP_YUBIKEY_PIN_POLICY}} --touch-policy {{env.AGE_BACKUP_YUBIKEY_TOUCH_POLICY}}"

[tasks.restore-backup]
description = "Decrypt and restore an encrypted backup archive."
run = "./scripts/core/07-restore-backup.sh {{arg(name='backup_file', required=true, help='Path to the .tar.gz.age encrypted backup file')}}"
usage = "mise restore-backup <path_to_encrypted_backup_file.tar.gz.age>"

[tasks.provision-additional-age-identity]
description = "Provision an additional YubiKey with a new AGE identity (assumes PIV applet is already set up)."
run = "./scripts/team/08-provision-additional-age-identity.sh --label {{arg(name='label', help='A label for this identity (e.g., team-member-name)', required=true)}} --serial {{env.ADDITIONAL_AGE_YUBIKEY_SERIAL}} --slot {{env.ADDITIONAL_AGE_PIV_SLOT}} --pin-policy {{env.ADDITIONAL_AGE_PIN_POLICY}} --touch-policy {{env.ADDITIONAL_AGE_TOUCH_POLICY}} --recipients-file {{env.ADDITIONAL_AGE_RECIPIENTS_FILE}} {{arg(name='output_file', help='Optional: Full path for the identity file (overrides template based on label/serial)')}}"
depends = ["checkup"]
usage = "mise provision-additional-age-identity <label> [--serial <yk_serial>] [--slot <piv_slot>] [--output_file <path>] ..."

[tasks.update-sops-config-age]
description = "Update .sops.yaml with AGE recipients from a specified file."
run = "./scripts/team/09-update-sops-recipients.sh"
usage = "mise update-sops-config-age [--input-file <path>] [--sops-file <path>]" # Actual args handled by script

[tasks.check-expiring-gpg-keys]
description = "Check for GPG keys expiring within a specified threshold (default 30 days)."
run = "./scripts/tools/10-check-expiring-keys.sh {{arg(name='days', help='Number of days for expiration threshold')}}"
usage = "mise check-expiring-gpg-keys [days]"

[tasks.rekey-sops-secrets]
description = "Re-encrypt SOPS files with current .sops.yaml recipients."
run = "./scripts/tools/11-rekey-sops-secrets.sh {{args}}" # Pass all extra args to the script
usage = "mise rekey-sops-secrets [--dry-run] [--backup] [file_or_dir ...]"

[tasks.rotate-gpg-subkeys]
description = "Rotate GPG subkeys (generate new ones, expire/revoke old ones)."
run = "./scripts/core/12-rotate-gpg-subkeys.sh {{arg(name='key_id', help='Optional GPG Master Key ID to operate on. Defaults to ID from .gpg_master_key_id file.')}}"
usage = "mise rotate-gpg-subkeys [key_id]"
depends = ["generate-gpg-keys"] # Implies master key should exist

[tasks.generate-gpg-on-yubikey]
description = "OPTIONAL & ADVANCED: Generate GPG keys directly ON a YubiKey (NON-BACKABLE private keys)."
run = "./scripts/core/16-generate-gpg-on-yubikey.sh --serial {{env.PRIMARY_YUBIKEY_SERIAL}}"
usage = "mise generate-gpg-on-yubikey [--serial <yubikey_serial>]"
depends = ["checkup"]

[tasks.setup-age-yubikey-redundancy]
description = "Guide setup of a second YubiKey for AGE redundancy and update SOPS config."
run = "./scripts/team/17-setup-age-yubikey-redundancy.sh"
depends = ["checkup", "provision-primary-age-yubikey"] # Assumes primary is already set up

[tasks.offline-verify-secrets]
description = "Attempt to decrypt a sample SOPS secret to verify AGE/GPG key accessibility (e.g., YubiKey)."
run = "./scripts/tools/13-offline-verify.sh {{arg(name='sops_file', help='Path to SOPS file to test decryption against')}} {{arg(name='identity_file', help='Optional path to AGE identity file')}}"
usage = "mise offline-verify-secrets [sops_file_to_test] [age_identity_file]"

[tasks.redact-secrets]
description = "Create visually redacted copies of specified files."
run = "./scripts/tools/14-redact-secrets.sh {{args}}" # Pass all extra args to the script
usage = "mise redact-secrets [--output-dir <path>] [file_or_dir ...]"

[tasks.audit-sops-secrets]
description = "Audit SOPS files for metadata and optional decryptability."
run = "./scripts/tools/15-audit-secrets.sh {{args}}" # Pass all extra args to the script
usage = "mise audit-sops-secrets [--decrypt-check] [file_or_dir ...]"


# SOPS related tasks (keeping existing ones, ensuring they use project env)
[tasks.sops-edit-env]
description = "Edit the encrypted secrets env file (secrets/.env.sops.yaml) using SOPS via EDITOR."
run = 'sops edit secrets/.env.sops.yaml' # Kept existing target file
alias = ["edit-env"]

[tasks.sops-encrypt-env]
description = "Encrypt the secrets env file (secrets/.env.sops.yaml) using SOPS."
run = 'sops encrypt --in-place secrets/.env.sops.yaml' # Kept existing target file
alias = ["encrypt-env"]

[tasks.sops-decrypt-env]
description = "DEBUG ONLY: Decrypt secrets env file (secrets/.env.sops.yaml) to stdout."
run = 'sops decrypt secrets/.env.sops.yaml' # Kept existing target file
alias = ["decrypt-env"]

[tasks.sops-edit]
description = "Edit an arbitrary encrypted SOPS file (e.g., secrets/some-other.enc.yaml)."
usage = "mise sops-edit <file_path>"
run = "sops {{arg(name='file', required=true)}}"
alias = ["edit"]

# Utility Tasks
[tasks.lint-scripts]
description = "Lint all Bash scripts with shellcheck."
run = "shellcheck ./scripts/**/*.sh" # Adjusted glob to include subdirectories

[tasks.clean-temp-gpg]
description = "Remove the temporary GPG home directory used for key generation."
run = "rm -rf {{env.TEMP_GNUPGHOME_DIR_NAME}}"
